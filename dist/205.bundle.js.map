{"version":3,"file":"205.bundle.js","mappings":"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","sources":["webpack://server/./node_modules/steno/lib/index.js","webpack://server/./node_modules/lowdb/lib/adapters/node/TextFile.js","webpack://server/./node_modules/lowdb/lib/adapters/node/DataFile.js","webpack://server/./node_modules/lowdb/lib/adapters/node/JSONFile.js","webpack://server/./node_modules/lowdb/lib/core/Low.js","webpack://server/./node_modules/lowdb/lib/presets/node.js"],"sourcesContent":["import { rename, writeFile } from 'node:fs/promises';\nimport { basename, dirname, join } from 'node:path';\nimport { fileURLToPath } from 'node:url';\n// Returns a temporary file\n// Example: for /some/file will return /some/.file.tmp\nfunction getTempFilename(file) {\n    const f = file instanceof URL ? fileURLToPath(file) : file.toString();\n    return join(dirname(f), `.${basename(f)}.tmp`);\n}\n// Retries an asynchronous operation with a delay between retries and a maximum retry count\nasync function retryAsyncOperation(fn, maxRetries, delayMs) {\n    for (let i = 0; i < maxRetries; i++) {\n        try {\n            return await fn();\n        }\n        catch (error) {\n            if (i < maxRetries - 1) {\n                await new Promise((resolve) => setTimeout(resolve, delayMs));\n            }\n            else {\n                throw error; // Rethrow the error if max retries reached\n            }\n        }\n    }\n}\nexport class Writer {\n    #filename;\n    #tempFilename;\n    #locked = false;\n    #prev = null;\n    #next = null;\n    #nextPromise = null;\n    #nextData = null;\n    // File is locked, add data for later\n    #add(data) {\n        // Only keep most recent data\n        this.#nextData = data;\n        // Create a singleton promise to resolve all next promises once next data is written\n        this.#nextPromise ||= new Promise((resolve, reject) => {\n            this.#next = [resolve, reject];\n        });\n        // Return a promise that will resolve at the same time as next promise\n        return new Promise((resolve, reject) => {\n            this.#nextPromise?.then(resolve).catch(reject);\n        });\n    }\n    // File isn't locked, write data\n    async #write(data) {\n        // Lock file\n        this.#locked = true;\n        try {\n            // Atomic write\n            await writeFile(this.#tempFilename, data, 'utf-8');\n            await retryAsyncOperation(async () => {\n                await rename(this.#tempFilename, this.#filename);\n            }, 10, 100);\n            // Call resolve\n            this.#prev?.[0]();\n        }\n        catch (err) {\n            // Call reject\n            if (err instanceof Error) {\n                this.#prev?.[1](err);\n            }\n            throw err;\n        }\n        finally {\n            // Unlock file\n            this.#locked = false;\n            this.#prev = this.#next;\n            this.#next = this.#nextPromise = null;\n            if (this.#nextData !== null) {\n                const nextData = this.#nextData;\n                this.#nextData = null;\n                await this.write(nextData);\n            }\n        }\n    }\n    constructor(filename) {\n        this.#filename = filename;\n        this.#tempFilename = getTempFilename(filename);\n    }\n    async write(data) {\n        return this.#locked ? this.#add(data) : this.#write(data);\n    }\n}\n","import { readFileSync, renameSync, writeFileSync } from 'node:fs';\nimport { readFile } from 'node:fs/promises';\nimport path from 'node:path';\nimport { Writer } from 'steno';\nexport class TextFile {\n    #filename;\n    #writer;\n    constructor(filename) {\n        this.#filename = filename;\n        this.#writer = new Writer(filename);\n    }\n    async read() {\n        let data;\n        try {\n            data = await readFile(this.#filename, 'utf-8');\n        }\n        catch (e) {\n            if (e.code === 'ENOENT') {\n                return null;\n            }\n            throw e;\n        }\n        return data;\n    }\n    write(str) {\n        return this.#writer.write(str);\n    }\n}\nexport class TextFileSync {\n    #tempFilename;\n    #filename;\n    constructor(filename) {\n        this.#filename = filename;\n        const f = filename.toString();\n        this.#tempFilename = path.join(path.dirname(f), `.${path.basename(f)}.tmp`);\n    }\n    read() {\n        let data;\n        try {\n            data = readFileSync(this.#filename, 'utf-8');\n        }\n        catch (e) {\n            if (e.code === 'ENOENT') {\n                return null;\n            }\n            throw e;\n        }\n        return data;\n    }\n    write(str) {\n        writeFileSync(this.#tempFilename, str);\n        renameSync(this.#tempFilename, this.#filename);\n    }\n}\n","import { TextFile, TextFileSync } from './TextFile.js';\nexport class DataFile {\n    #adapter;\n    #parse;\n    #stringify;\n    constructor(filename, { parse, stringify, }) {\n        this.#adapter = new TextFile(filename);\n        this.#parse = parse;\n        this.#stringify = stringify;\n    }\n    async read() {\n        const data = await this.#adapter.read();\n        if (data === null) {\n            return null;\n        }\n        else {\n            return this.#parse(data);\n        }\n    }\n    write(obj) {\n        return this.#adapter.write(this.#stringify(obj));\n    }\n}\nexport class DataFileSync {\n    #adapter;\n    #parse;\n    #stringify;\n    constructor(filename, { parse, stringify, }) {\n        this.#adapter = new TextFileSync(filename);\n        this.#parse = parse;\n        this.#stringify = stringify;\n    }\n    read() {\n        const data = this.#adapter.read();\n        if (data === null) {\n            return null;\n        }\n        else {\n            return this.#parse(data);\n        }\n    }\n    write(obj) {\n        this.#adapter.write(this.#stringify(obj));\n    }\n}\n","import { DataFile, DataFileSync } from './DataFile.js';\nexport class JSONFile extends DataFile {\n    constructor(filename) {\n        super(filename, {\n            parse: JSON.parse,\n            stringify: (data) => JSON.stringify(data, null, 2),\n        });\n    }\n}\nexport class JSONFileSync extends DataFileSync {\n    constructor(filename) {\n        super(filename, {\n            parse: JSON.parse,\n            stringify: (data) => JSON.stringify(data, null, 2),\n        });\n    }\n}\n","function checkArgs(adapter, defaultData) {\n    if (adapter === undefined)\n        throw new Error('lowdb: missing adapter');\n    if (defaultData === undefined)\n        throw new Error('lowdb: missing default data');\n}\nexport class Low {\n    adapter;\n    data;\n    constructor(adapter, defaultData) {\n        checkArgs(adapter, defaultData);\n        this.adapter = adapter;\n        this.data = defaultData;\n    }\n    async read() {\n        const data = await this.adapter.read();\n        if (data)\n            this.data = data;\n    }\n    async write() {\n        if (this.data)\n            await this.adapter.write(this.data);\n    }\n    async update(fn) {\n        fn(this.data);\n        await this.write();\n    }\n}\nexport class LowSync {\n    adapter;\n    data;\n    constructor(adapter, defaultData) {\n        checkArgs(adapter, defaultData);\n        this.adapter = adapter;\n        this.data = defaultData;\n    }\n    read() {\n        const data = this.adapter.read();\n        if (data)\n            this.data = data;\n    }\n    write() {\n        if (this.data)\n            this.adapter.write(this.data);\n    }\n    update(fn) {\n        fn(this.data);\n        this.write();\n    }\n}\n","import { Memory, MemorySync } from '../adapters/Memory.js';\nimport { JSONFile, JSONFileSync } from '../adapters/node/JSONFile.js';\nimport { Low, LowSync } from '../core/Low.js';\nexport async function JSONFilePreset(filename, defaultData) {\n    const adapter = process.env.NODE_ENV === 'test'\n        ? new Memory()\n        : new JSONFile(filename);\n    const db = new Low(adapter, defaultData);\n    await db.read();\n    return db;\n}\nexport function JSONFileSyncPreset(filename, defaultData) {\n    const adapter = process.env.NODE_ENV === 'test'\n        ? new MemorySync()\n        : new JSONFileSync(filename);\n    const db = new LowSync(adapter, defaultData);\n    db.read();\n    return db;\n}\n"],"names":["Writer","data","this","Promise","resolve","reject","then","catch","writeFile","async","fn","i","error","maxRetries","setTimeout","retryAsyncOperation","rename","err","Error","nextData","write","constructor","filename","file","f","URL","fileURLToPath","toString","join","dirname","basename","getTempFilename","TextFile","read","readFile","e","code","str","TextFileSync","readFileSync","writeFileSync","renameSync","DataFile","parse","stringify","obj","DataFileSync","JSONFile","super","JSON","JSONFileSync","checkArgs","adapter","defaultData","undefined","Low","update","LowSync","JSONFilePreset","db","JSONFileSyncPreset"],"sourceRoot":""}